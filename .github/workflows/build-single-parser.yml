name: Build Single Tree-sitter Parser

on:
  workflow_dispatch:
    inputs:
      language:
        description: "Language to build parser for"
        required: true
        type: choice
        options:
          - all
          - javascript
          - typescript
          - tsx
          - html
          - css
          - angular
          - java
          - kotlin
          - scala
          - python
          - go
          - rust
          - c-sharp
          - cpp
          - c
          - php
          - ruby
          - elixir
          - json
          - yaml
      platforms:
        description: "Platforms to build for"
        required: true
        type: choice
        default: "all"
        options:
          - all
          - linux-only
          - macos-only
          - windows-only

env:
  TREE_SITTER_ABI_VERSION: "15"

jobs:
  setup:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup matrix
        id: setup-matrix
        run: |
          # Define platform configurations following Python example pattern
          platforms='[
            {"os": "ubuntu-latest", "arch": "x64", "platform": "linux", "cross_compile": false},
            {"os": "ubuntu-latest", "arch": "arm64", "platform": "linux", "cross_compile": true, "qemu_arch": "arm64"},
            {"os": "macos-latest", "arch": "arm64", "platform": "darwin", "cross_compile": false},
            {"os": "macos-latest", "arch": "x64", "platform": "darwin", "cross_compile": true},
            {"os": "windows-latest", "arch": "x64", "platform": "win32", "cross_compile": false}
          ]'

          if [ "${{ inputs.language }}" == "all" ]; then
            # Extract all language names from languages.json
            languages=$(jq -r '.languages | keys' languages.json)
          else
            # Single language
            languages='["${{ inputs.language }}"]'
          fi

          # Create matrix combinations
          matrix=$(echo "$languages" | jq -c --argjson platforms "$platforms" '[.[] as $lang | $platforms[] | . + {"language": $lang}]')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.language }} on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for cross-compilation)
        if: matrix.qemu_arch != '' && matrix.qemu_arch != null
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.qemu_arch }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Set up tree-sitter CLI
        uses: tree-sitter/setup-action/cli@v2

      - name: Extract language info
        id: lang-info
        shell: bash
        run: |
          repo_url=$(jq -r ".languages[\"${{ matrix.language }}\"].repo" languages.json)
          ref=$(jq -r ".languages[\"${{ matrix.language }}\"].ref" languages.json)
          echo "repo_url=$repo_url" >> $GITHUB_OUTPUT
          echo "ref=$ref" >> $GITHUB_OUTPUT

      - name: Make scripts executable
        shell: bash
        run: chmod +x scripts/*.sh

      - name: Install GNU coreutils (macOS only)
        if: matrix.platform == 'darwin'
        run: brew install coreutils

      - name: Build parser (Linux ARM64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace \
            --platform linux/arm64 \
            node:18-alpine \
            sh -c "
              apk add --no-cache git bash tree-sitter-cli build-base &&
              ./scripts/build-parser.sh '${{ matrix.language }}' '${{ steps.lang-info.outputs.repo_url }}' '${{ steps.lang-info.outputs.ref }}' 'artifacts' '${{ matrix.arch }}' '${{ matrix.platform }}' '${{ matrix.cross_compile }}'
            "
        env:
          TREE_SITTER_ABI_VERSION: ${{ env.TREE_SITTER_ABI_VERSION }}

      - name: Build parser (Native)
        if: matrix.os != 'ubuntu-latest' || matrix.arch != 'arm64'
        shell: bash
        run: |
          ./scripts/build-parser.sh "${{ matrix.language }}" "${{ steps.lang-info.outputs.repo_url }}" "${{ steps.lang-info.outputs.ref }}" "artifacts" "${{ matrix.arch }}" "${{ matrix.platform }}" "${{ matrix.cross_compile }}"
        env:
          TREE_SITTER_ABI_VERSION: ${{ env.TREE_SITTER_ABI_VERSION }}
          # Set cross-compilation flags for macOS x86_64
          CFLAGS: ${{ matrix.cross_compile == true && matrix.platform == 'darwin' && '-arch x86_64' || '' }}
          CXXFLAGS: ${{ matrix.cross_compile == true && matrix.platform == 'darwin' && '-arch x86_64' || '' }}
          LDFLAGS: ${{ matrix.cross_compile == true && matrix.platform == 'darwin' && '-arch x86_64' || '' }}
          ARCHFLAGS: ${{ matrix.cross_compile == true && matrix.platform == 'darwin' && '-arch x86_64' || '' }}

      - name: Import Code Signing Certificate (macOS only)
        if: matrix.platform == 'darwin'
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Sign dylib files (macOS only)
        if: matrix.platform == 'darwin'
        env:
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        shell: bash
        run: |
          find artifacts/ -name "*.dylib" | while read -r dylib_file; do
            echo "Signing: $dylib_file"
            # Set timeout for codesign (5 minutes)
            timeout 300 codesign \
              --force \
              --timestamp \
              --sign "$APPLE_IDENTITY" \
              --team-id "$APPLE_TEAM_ID" \
              --options runtime \
              --verbose \
              "$dylib_file"
          done

      - name: Verify Signing (macOS only)
        if: matrix.platform == 'darwin'
        shell: bash
        run: |
          find artifacts/ -name "*.dylib" | while read -r dylib_file; do
            echo "Verifying signature for: $dylib_file"
            codesign --verify --deep --verbose=4 "$dylib_file"
          done

      - name: Create ZIP for Notarization (macOS only)
        if: matrix.platform == 'darwin'
        shell: bash
        run: |
          # Create zip with all dylib files found recursively in artifacts/
          find artifacts/ -name "*.dylib" -exec zip parsers-${{ matrix.language }}-${{ matrix.platform }}-${{ matrix.arch }}.zip {} +

      - name: Submit for Notarization (macOS only)
        if: matrix.platform == 'darwin'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        shell: bash
        run: |
          # Set timeout for notarization (15 minutes)
          timeout 900 xcrun notarytool submit parsers-${{ matrix.language }}-${{ matrix.platform }}-${{ matrix.arch }}.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --verbose

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: parser-${{ matrix.language }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: artifacts/
          retention-days: 7

  upload:
    name: Upload to S3
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts-download/
          pattern: parser-*-*
          merge-multiple: true

      - name: Configure AWS Credentials for S3 Upload
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Upload parsers to S3
        run: |
          # Upload all parser files to S3
          find artifacts-download/ -type f \( -name "*.so" -o -name "*.dylib" -o -name "*.dll" -o -name "*.wasm" \) | while read -r file; do
            # Extract the relative path from artifacts directory
            relative_path=${file#artifacts-download/}
            
            # Construct S3 key
            s3_key="tree-sitter/parsers/tree-sitter-$relative_path"
            
            echo "Uploading: $file -> s3://${{ secrets.S3_BUCKET_NAME }}/$s3_key"
            
            # Upload to S3
            aws s3 cp "$file" "s3://${{ secrets.S3_BUCKET_NAME }}/$s3_key" \
              --metadata "source-file=$relative_path" \
              --cache-control "public, max-age=31536000" \
              --content-type "application/octet-stream"
          done

      - name: Summary
        run: |
          if [ "${{ inputs.language }}" == "all" ]; then
            echo "## ðŸŽ‰ Build Summary for All Languages" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ðŸŽ‰ Build Summary for ${{ inputs.language }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Files" >> $GITHUB_STEP_SUMMARY
          find artifacts-download/ -name "*.so" -o -name "*.dylib" -o -name "*.dll" -o -name "*.wasm" | sort | while read file; do
            echo "- \`$(basename "$file")\` ($(du -h "$file" | cut -f1))" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### S3 Location" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.language }}" == "all" ]; then
            echo "Files uploaded to: \`s3://${{ secrets.S3_BUCKET_NAME }}/tree-sitter/parsers/\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "Files uploaded to: \`s3://${{ secrets.S3_BUCKET_NAME }}/tree-sitter/parsers/tree-sitter-${{ inputs.language }}/\`" >> $GITHUB_STEP_SUMMARY
          fi
